# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_stepik_alignment')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_stepik_alignment')
    _stepik_alignment = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stepik_alignment', [dirname(__file__)])
        except ImportError:
            import _stepik_alignment
            return _stepik_alignment
        try:
            _mod = imp.load_module('_stepik_alignment', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _stepik_alignment = swig_import_helper()
    del swig_import_helper
else:
    import _stepik_alignment
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stepik_alignment.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _stepik_alignment.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _stepik_alignment.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _stepik_alignment.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _stepik_alignment.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _stepik_alignment.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _stepik_alignment.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _stepik_alignment.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _stepik_alignment.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _stepik_alignment.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _stepik_alignment.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _stepik_alignment.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _stepik_alignment.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _stepik_alignment.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _stepik_alignment.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _stepik_alignment.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _stepik_alignment.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class mapString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapString, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.mapString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _stepik_alignment.mapString___nonzero__(self)

    def __bool__(self) -> "bool":
        return _stepik_alignment.mapString___bool__(self)

    def __len__(self) -> "std::map< std::string,int >::size_type":
        return _stepik_alignment.mapString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,int >::key_type const &') -> "std::map< std::string,int >::mapped_type const &":
        return _stepik_alignment.mapString___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::string,int >::key_type const &') -> "void":
        return _stepik_alignment.mapString___delitem__(self, key)

    def has_key(self, key: 'std::map< std::string,int >::key_type const &') -> "bool":
        return _stepik_alignment.mapString_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _stepik_alignment.mapString_keys(self)

    def values(self) -> "PyObject *":
        return _stepik_alignment.mapString_values(self)

    def items(self) -> "PyObject *":
        return _stepik_alignment.mapString_items(self)

    def __contains__(self, key: 'std::map< std::string,int >::key_type const &') -> "bool":
        return _stepik_alignment.mapString___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.mapString_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.mapString_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _stepik_alignment.mapString___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _stepik_alignment.mapString_asdict(self)

    def __init__(self, *args):
        this = _stepik_alignment.new_mapString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _stepik_alignment.mapString_empty(self)

    def size(self) -> "std::map< std::string,int >::size_type":
        return _stepik_alignment.mapString_size(self)

    def swap(self, v: 'mapString') -> "void":
        return _stepik_alignment.mapString_swap(self, v)

    def begin(self) -> "std::map< std::string,int >::iterator":
        return _stepik_alignment.mapString_begin(self)

    def end(self) -> "std::map< std::string,int >::iterator":
        return _stepik_alignment.mapString_end(self)

    def rbegin(self) -> "std::map< std::string,int >::reverse_iterator":
        return _stepik_alignment.mapString_rbegin(self)

    def rend(self) -> "std::map< std::string,int >::reverse_iterator":
        return _stepik_alignment.mapString_rend(self)

    def clear(self) -> "void":
        return _stepik_alignment.mapString_clear(self)

    def get_allocator(self) -> "std::map< std::string,int >::allocator_type":
        return _stepik_alignment.mapString_get_allocator(self)

    def count(self, x: 'std::map< std::string,int >::key_type const &') -> "std::map< std::string,int >::size_type":
        return _stepik_alignment.mapString_count(self, x)

    def erase(self, *args) -> "void":
        return _stepik_alignment.mapString_erase(self, *args)

    def find(self, x: 'std::map< std::string,int >::key_type const &') -> "std::map< std::string,int >::iterator":
        return _stepik_alignment.mapString_find(self, x)

    def lower_bound(self, x: 'std::map< std::string,int >::key_type const &') -> "std::map< std::string,int >::iterator":
        return _stepik_alignment.mapString_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::string,int >::key_type const &') -> "std::map< std::string,int >::iterator":
        return _stepik_alignment.mapString_upper_bound(self, x)
    __swig_destroy__ = _stepik_alignment.delete_mapString
    __del__ = lambda self: None
mapString_swigregister = _stepik_alignment.mapString_swigregister
mapString_swigregister(mapString)

class mapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapStringString, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.mapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _stepik_alignment.mapStringString___nonzero__(self)

    def __bool__(self) -> "bool":
        return _stepik_alignment.mapStringString___bool__(self)

    def __len__(self) -> "std::map< std::string,std::map< std::string,int > >::size_type":
        return _stepik_alignment.mapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "std::map< std::string,std::map< std::string,int > >::mapped_type const &":
        return _stepik_alignment.mapStringString___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "void":
        return _stepik_alignment.mapStringString___delitem__(self, key)

    def has_key(self, key: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "bool":
        return _stepik_alignment.mapStringString_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _stepik_alignment.mapStringString_keys(self)

    def values(self) -> "PyObject *":
        return _stepik_alignment.mapStringString_values(self)

    def items(self) -> "PyObject *":
        return _stepik_alignment.mapStringString_items(self)

    def __contains__(self, key: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "bool":
        return _stepik_alignment.mapStringString___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.mapStringString_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.mapStringString_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _stepik_alignment.mapStringString___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _stepik_alignment.mapStringString_asdict(self)

    def __init__(self, *args):
        this = _stepik_alignment.new_mapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _stepik_alignment.mapStringString_empty(self)

    def size(self) -> "std::map< std::string,std::map< std::string,int > >::size_type":
        return _stepik_alignment.mapStringString_size(self)

    def swap(self, v: 'mapStringString') -> "void":
        return _stepik_alignment.mapStringString_swap(self, v)

    def begin(self) -> "std::map< std::string,std::map< std::string,int > >::iterator":
        return _stepik_alignment.mapStringString_begin(self)

    def end(self) -> "std::map< std::string,std::map< std::string,int > >::iterator":
        return _stepik_alignment.mapStringString_end(self)

    def rbegin(self) -> "std::map< std::string,std::map< std::string,int > >::reverse_iterator":
        return _stepik_alignment.mapStringString_rbegin(self)

    def rend(self) -> "std::map< std::string,std::map< std::string,int > >::reverse_iterator":
        return _stepik_alignment.mapStringString_rend(self)

    def clear(self) -> "void":
        return _stepik_alignment.mapStringString_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::map< std::string,int > >::allocator_type":
        return _stepik_alignment.mapStringString_get_allocator(self)

    def count(self, x: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "std::map< std::string,std::map< std::string,int > >::size_type":
        return _stepik_alignment.mapStringString_count(self, x)

    def erase(self, *args) -> "void":
        return _stepik_alignment.mapStringString_erase(self, *args)

    def find(self, x: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "std::map< std::string,std::map< std::string,int > >::iterator":
        return _stepik_alignment.mapStringString_find(self, x)

    def lower_bound(self, x: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "std::map< std::string,std::map< std::string,int > >::iterator":
        return _stepik_alignment.mapStringString_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::string,std::map< std::string,int > >::key_type const &') -> "std::map< std::string,std::map< std::string,int > >::iterator":
        return _stepik_alignment.mapStringString_upper_bound(self, x)
    __swig_destroy__ = _stepik_alignment.delete_mapStringString
    __del__ = lambda self: None
mapStringString_swigregister = _stepik_alignment.mapStringString_swigregister
mapStringString_swigregister(mapStringString)

class intPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _stepik_alignment.new_intPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _stepik_alignment.intPair_first_set
    __swig_getmethods__["first"] = _stepik_alignment.intPair_first_get
    if _newclass:
        first = _swig_property(_stepik_alignment.intPair_first_get, _stepik_alignment.intPair_first_set)
    __swig_setmethods__["second"] = _stepik_alignment.intPair_second_set
    __swig_getmethods__["second"] = _stepik_alignment.intPair_second_get
    if _newclass:
        second = _swig_property(_stepik_alignment.intPair_second_get, _stepik_alignment.intPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _stepik_alignment.delete_intPair
    __del__ = lambda self: None
intPair_swigregister = _stepik_alignment.intPair_swigregister
intPair_swigregister(intPair)

class vecIntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecIntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecIntPair, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.vecIntPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _stepik_alignment.vecIntPair___nonzero__(self)

    def __bool__(self) -> "bool":
        return _stepik_alignment.vecIntPair___bool__(self)

    def __len__(self) -> "std::vector< std::pair< int,int > >::size_type":
        return _stepik_alignment.vecIntPair___len__(self)

    def __getslice__(self, i: 'std::vector< std::pair< int,int > >::difference_type', j: 'std::vector< std::pair< int,int > >::difference_type') -> "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *":
        return _stepik_alignment.vecIntPair___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _stepik_alignment.vecIntPair___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::pair< int,int > >::difference_type', j: 'std::vector< std::pair< int,int > >::difference_type') -> "void":
        return _stepik_alignment.vecIntPair___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _stepik_alignment.vecIntPair___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< int,int > >::value_type const &":
        return _stepik_alignment.vecIntPair___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _stepik_alignment.vecIntPair___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< int,int > >::value_type":
        return _stepik_alignment.vecIntPair_pop(self)

    def append(self, x: 'intPair') -> "void":
        return _stepik_alignment.vecIntPair_append(self, x)

    def empty(self) -> "bool":
        return _stepik_alignment.vecIntPair_empty(self)

    def size(self) -> "std::vector< std::pair< int,int > >::size_type":
        return _stepik_alignment.vecIntPair_size(self)

    def swap(self, v: 'vecIntPair') -> "void":
        return _stepik_alignment.vecIntPair_swap(self, v)

    def begin(self) -> "std::vector< std::pair< int,int > >::iterator":
        return _stepik_alignment.vecIntPair_begin(self)

    def end(self) -> "std::vector< std::pair< int,int > >::iterator":
        return _stepik_alignment.vecIntPair_end(self)

    def rbegin(self) -> "std::vector< std::pair< int,int > >::reverse_iterator":
        return _stepik_alignment.vecIntPair_rbegin(self)

    def rend(self) -> "std::vector< std::pair< int,int > >::reverse_iterator":
        return _stepik_alignment.vecIntPair_rend(self)

    def clear(self) -> "void":
        return _stepik_alignment.vecIntPair_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< int,int > >::allocator_type":
        return _stepik_alignment.vecIntPair_get_allocator(self)

    def pop_back(self) -> "void":
        return _stepik_alignment.vecIntPair_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< int,int > >::iterator":
        return _stepik_alignment.vecIntPair_erase(self, *args)

    def __init__(self, *args):
        this = _stepik_alignment.new_vecIntPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'intPair') -> "void":
        return _stepik_alignment.vecIntPair_push_back(self, x)

    def front(self) -> "std::vector< std::pair< int,int > >::value_type const &":
        return _stepik_alignment.vecIntPair_front(self)

    def back(self) -> "std::vector< std::pair< int,int > >::value_type const &":
        return _stepik_alignment.vecIntPair_back(self)

    def assign(self, n: 'std::vector< std::pair< int,int > >::size_type', x: 'intPair') -> "void":
        return _stepik_alignment.vecIntPair_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _stepik_alignment.vecIntPair_resize(self, *args)

    def insert(self, *args) -> "void":
        return _stepik_alignment.vecIntPair_insert(self, *args)

    def reserve(self, n: 'std::vector< std::pair< int,int > >::size_type') -> "void":
        return _stepik_alignment.vecIntPair_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< int,int > >::size_type":
        return _stepik_alignment.vecIntPair_capacity(self)
    __swig_destroy__ = _stepik_alignment.delete_vecIntPair
    __del__ = lambda self: None
vecIntPair_swigregister = _stepik_alignment.vecIntPair_swigregister
vecIntPair_swigregister(vecIntPair)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _stepik_alignment.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _stepik_alignment.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _stepik_alignment.StringVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _stepik_alignment.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _stepik_alignment.StringVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _stepik_alignment.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _stepik_alignment.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _stepik_alignment.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _stepik_alignment.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _stepik_alignment.StringVector_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _stepik_alignment.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _stepik_alignment.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _stepik_alignment.StringVector_size(self)

    def swap(self, v: 'StringVector') -> "void":
        return _stepik_alignment.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _stepik_alignment.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _stepik_alignment.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _stepik_alignment.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _stepik_alignment.StringVector_rend(self)

    def clear(self) -> "void":
        return _stepik_alignment.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _stepik_alignment.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _stepik_alignment.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _stepik_alignment.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _stepik_alignment.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _stepik_alignment.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _stepik_alignment.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _stepik_alignment.StringVector_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _stepik_alignment.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _stepik_alignment.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _stepik_alignment.StringVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _stepik_alignment.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _stepik_alignment.StringVector_capacity(self)
    __swig_destroy__ = _stepik_alignment.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _stepik_alignment.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _stepik_alignment.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _stepik_alignment.ConstCharVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _stepik_alignment.ConstCharVector___bool__(self)

    def __len__(self) -> "std::vector< char const * >::size_type":
        return _stepik_alignment.ConstCharVector___len__(self)

    def __getslice__(self, i: 'std::vector< char const * >::difference_type', j: 'std::vector< char const * >::difference_type') -> "std::vector< char const *,std::allocator< char const * > > *":
        return _stepik_alignment.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _stepik_alignment.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< char const * >::difference_type', j: 'std::vector< char const * >::difference_type') -> "void":
        return _stepik_alignment.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _stepik_alignment.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< char const * >::value_type":
        return _stepik_alignment.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _stepik_alignment.ConstCharVector___setitem__(self, *args)

    def pop(self) -> "std::vector< char const * >::value_type":
        return _stepik_alignment.ConstCharVector_pop(self)

    def append(self, x: 'std::vector< char const * >::value_type') -> "void":
        return _stepik_alignment.ConstCharVector_append(self, x)

    def empty(self) -> "bool":
        return _stepik_alignment.ConstCharVector_empty(self)

    def size(self) -> "std::vector< char const * >::size_type":
        return _stepik_alignment.ConstCharVector_size(self)

    def swap(self, v: 'ConstCharVector') -> "void":
        return _stepik_alignment.ConstCharVector_swap(self, v)

    def begin(self) -> "std::vector< char const * >::iterator":
        return _stepik_alignment.ConstCharVector_begin(self)

    def end(self) -> "std::vector< char const * >::iterator":
        return _stepik_alignment.ConstCharVector_end(self)

    def rbegin(self) -> "std::vector< char const * >::reverse_iterator":
        return _stepik_alignment.ConstCharVector_rbegin(self)

    def rend(self) -> "std::vector< char const * >::reverse_iterator":
        return _stepik_alignment.ConstCharVector_rend(self)

    def clear(self) -> "void":
        return _stepik_alignment.ConstCharVector_clear(self)

    def get_allocator(self) -> "std::vector< char const * >::allocator_type":
        return _stepik_alignment.ConstCharVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _stepik_alignment.ConstCharVector_pop_back(self)

    def erase(self, *args) -> "std::vector< char const * >::iterator":
        return _stepik_alignment.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _stepik_alignment.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< char const * >::value_type') -> "void":
        return _stepik_alignment.ConstCharVector_push_back(self, x)

    def front(self) -> "std::vector< char const * >::value_type":
        return _stepik_alignment.ConstCharVector_front(self)

    def back(self) -> "std::vector< char const * >::value_type":
        return _stepik_alignment.ConstCharVector_back(self)

    def assign(self, n: 'std::vector< char const * >::size_type', x: 'std::vector< char const * >::value_type') -> "void":
        return _stepik_alignment.ConstCharVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _stepik_alignment.ConstCharVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _stepik_alignment.ConstCharVector_insert(self, *args)

    def reserve(self, n: 'std::vector< char const * >::size_type') -> "void":
        return _stepik_alignment.ConstCharVector_reserve(self, n)

    def capacity(self) -> "std::vector< char const * >::size_type":
        return _stepik_alignment.ConstCharVector_capacity(self)
    __swig_destroy__ = _stepik_alignment.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _stepik_alignment.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class alignment_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alignment_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alignment_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["score"] = _stepik_alignment.alignment_result_score_set
    __swig_getmethods__["score"] = _stepik_alignment.alignment_result_score_get
    if _newclass:
        score = _swig_property(_stepik_alignment.alignment_result_score_get, _stepik_alignment.alignment_result_score_set)
    __swig_setmethods__["s1"] = _stepik_alignment.alignment_result_s1_set
    __swig_getmethods__["s1"] = _stepik_alignment.alignment_result_s1_get
    if _newclass:
        s1 = _swig_property(_stepik_alignment.alignment_result_s1_get, _stepik_alignment.alignment_result_s1_set)
    __swig_setmethods__["s2"] = _stepik_alignment.alignment_result_s2_set
    __swig_getmethods__["s2"] = _stepik_alignment.alignment_result_s2_get
    if _newclass:
        s2 = _swig_property(_stepik_alignment.alignment_result_s2_get, _stepik_alignment.alignment_result_s2_set)

    def __init__(self):
        this = _stepik_alignment.new_alignment_result()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stepik_alignment.delete_alignment_result
    __del__ = lambda self: None
alignment_result_swigregister = _stepik_alignment.alignment_result_swigregister
alignment_result_swigregister(alignment_result)


def alignment(s1: 'StringVector', s2: 'StringVector', gapop: 'int', gapex: 'int', scoring_matrix: 'mapStringString', local: 'bool') -> "alignment_result":
    return _stepik_alignment.alignment(s1, s2, gapop, gapex, scoring_matrix, local)
alignment = _stepik_alignment.alignment
# This file is compatible with both classic and new-style classes.


