# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_stepik_alignment')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_stepik_alignment')
    _stepik_alignment = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stepik_alignment', [dirname(__file__)])
        except ImportError:
            import _stepik_alignment
            return _stepik_alignment
        try:
            _mod = imp.load_module('_stepik_alignment', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _stepik_alignment = swig_import_helper()
    del swig_import_helper
else:
    import _stepik_alignment
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stepik_alignment.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _stepik_alignment.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _stepik_alignment.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _stepik_alignment.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _stepik_alignment.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _stepik_alignment.SwigPyIterator_equal(self, x)

    def copy(self):
        return _stepik_alignment.SwigPyIterator_copy(self)

    def next(self):
        return _stepik_alignment.SwigPyIterator_next(self)

    def __next__(self):
        return _stepik_alignment.SwigPyIterator___next__(self)

    def previous(self):
        return _stepik_alignment.SwigPyIterator_previous(self)

    def advance(self, n):
        return _stepik_alignment.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _stepik_alignment.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _stepik_alignment.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _stepik_alignment.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _stepik_alignment.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _stepik_alignment.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _stepik_alignment.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _stepik_alignment.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class mapChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _stepik_alignment.mapChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stepik_alignment.mapChar___nonzero__(self)

    def __bool__(self):
        return _stepik_alignment.mapChar___bool__(self)

    def __len__(self):
        return _stepik_alignment.mapChar___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stepik_alignment.mapChar___getitem__(self, key)

    def __delitem__(self, key):
        return _stepik_alignment.mapChar___delitem__(self, key)

    def has_key(self, key):
        return _stepik_alignment.mapChar_has_key(self, key)

    def keys(self):
        return _stepik_alignment.mapChar_keys(self)

    def values(self):
        return _stepik_alignment.mapChar_values(self)

    def items(self):
        return _stepik_alignment.mapChar_items(self)

    def __contains__(self, key):
        return _stepik_alignment.mapChar___contains__(self, key)

    def key_iterator(self):
        return _stepik_alignment.mapChar_key_iterator(self)

    def value_iterator(self):
        return _stepik_alignment.mapChar_value_iterator(self)

    def __setitem__(self, *args):
        return _stepik_alignment.mapChar___setitem__(self, *args)

    def asdict(self):
        return _stepik_alignment.mapChar_asdict(self)

    def __init__(self, *args):
        this = _stepik_alignment.new_mapChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stepik_alignment.mapChar_empty(self)

    def size(self):
        return _stepik_alignment.mapChar_size(self)

    def swap(self, v):
        return _stepik_alignment.mapChar_swap(self, v)

    def begin(self):
        return _stepik_alignment.mapChar_begin(self)

    def end(self):
        return _stepik_alignment.mapChar_end(self)

    def rbegin(self):
        return _stepik_alignment.mapChar_rbegin(self)

    def rend(self):
        return _stepik_alignment.mapChar_rend(self)

    def clear(self):
        return _stepik_alignment.mapChar_clear(self)

    def get_allocator(self):
        return _stepik_alignment.mapChar_get_allocator(self)

    def count(self, x):
        return _stepik_alignment.mapChar_count(self, x)

    def erase(self, *args):
        return _stepik_alignment.mapChar_erase(self, *args)

    def find(self, x):
        return _stepik_alignment.mapChar_find(self, x)

    def lower_bound(self, x):
        return _stepik_alignment.mapChar_lower_bound(self, x)

    def upper_bound(self, x):
        return _stepik_alignment.mapChar_upper_bound(self, x)
    __swig_destroy__ = _stepik_alignment.delete_mapChar
    __del__ = lambda self: None
mapChar_swigregister = _stepik_alignment.mapChar_swigregister
mapChar_swigregister(mapChar)

class mapCharChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapCharChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapCharChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _stepik_alignment.mapCharChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stepik_alignment.mapCharChar___nonzero__(self)

    def __bool__(self):
        return _stepik_alignment.mapCharChar___bool__(self)

    def __len__(self):
        return _stepik_alignment.mapCharChar___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stepik_alignment.mapCharChar___getitem__(self, key)

    def __delitem__(self, key):
        return _stepik_alignment.mapCharChar___delitem__(self, key)

    def has_key(self, key):
        return _stepik_alignment.mapCharChar_has_key(self, key)

    def keys(self):
        return _stepik_alignment.mapCharChar_keys(self)

    def values(self):
        return _stepik_alignment.mapCharChar_values(self)

    def items(self):
        return _stepik_alignment.mapCharChar_items(self)

    def __contains__(self, key):
        return _stepik_alignment.mapCharChar___contains__(self, key)

    def key_iterator(self):
        return _stepik_alignment.mapCharChar_key_iterator(self)

    def value_iterator(self):
        return _stepik_alignment.mapCharChar_value_iterator(self)

    def __setitem__(self, *args):
        return _stepik_alignment.mapCharChar___setitem__(self, *args)

    def asdict(self):
        return _stepik_alignment.mapCharChar_asdict(self)

    def __init__(self, *args):
        this = _stepik_alignment.new_mapCharChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stepik_alignment.mapCharChar_empty(self)

    def size(self):
        return _stepik_alignment.mapCharChar_size(self)

    def swap(self, v):
        return _stepik_alignment.mapCharChar_swap(self, v)

    def begin(self):
        return _stepik_alignment.mapCharChar_begin(self)

    def end(self):
        return _stepik_alignment.mapCharChar_end(self)

    def rbegin(self):
        return _stepik_alignment.mapCharChar_rbegin(self)

    def rend(self):
        return _stepik_alignment.mapCharChar_rend(self)

    def clear(self):
        return _stepik_alignment.mapCharChar_clear(self)

    def get_allocator(self):
        return _stepik_alignment.mapCharChar_get_allocator(self)

    def count(self, x):
        return _stepik_alignment.mapCharChar_count(self, x)

    def erase(self, *args):
        return _stepik_alignment.mapCharChar_erase(self, *args)

    def find(self, x):
        return _stepik_alignment.mapCharChar_find(self, x)

    def lower_bound(self, x):
        return _stepik_alignment.mapCharChar_lower_bound(self, x)

    def upper_bound(self, x):
        return _stepik_alignment.mapCharChar_upper_bound(self, x)
    __swig_destroy__ = _stepik_alignment.delete_mapCharChar
    __del__ = lambda self: None
mapCharChar_swigregister = _stepik_alignment.mapCharChar_swigregister
mapCharChar_swigregister(mapCharChar)

class intPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _stepik_alignment.new_intPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _stepik_alignment.intPair_first_set
    __swig_getmethods__["first"] = _stepik_alignment.intPair_first_get
    if _newclass:
        first = _swig_property(_stepik_alignment.intPair_first_get, _stepik_alignment.intPair_first_set)
    __swig_setmethods__["second"] = _stepik_alignment.intPair_second_set
    __swig_getmethods__["second"] = _stepik_alignment.intPair_second_get
    if _newclass:
        second = _swig_property(_stepik_alignment.intPair_second_get, _stepik_alignment.intPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _stepik_alignment.delete_intPair
    __del__ = lambda self: None
intPair_swigregister = _stepik_alignment.intPair_swigregister
intPair_swigregister(intPair)

class vecIntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecIntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecIntPair, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _stepik_alignment.vecIntPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stepik_alignment.vecIntPair___nonzero__(self)

    def __bool__(self):
        return _stepik_alignment.vecIntPair___bool__(self)

    def __len__(self):
        return _stepik_alignment.vecIntPair___len__(self)

    def __getslice__(self, i, j):
        return _stepik_alignment.vecIntPair___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stepik_alignment.vecIntPair___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stepik_alignment.vecIntPair___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stepik_alignment.vecIntPair___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stepik_alignment.vecIntPair___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stepik_alignment.vecIntPair___setitem__(self, *args)

    def pop(self):
        return _stepik_alignment.vecIntPair_pop(self)

    def append(self, x):
        return _stepik_alignment.vecIntPair_append(self, x)

    def empty(self):
        return _stepik_alignment.vecIntPair_empty(self)

    def size(self):
        return _stepik_alignment.vecIntPair_size(self)

    def swap(self, v):
        return _stepik_alignment.vecIntPair_swap(self, v)

    def begin(self):
        return _stepik_alignment.vecIntPair_begin(self)

    def end(self):
        return _stepik_alignment.vecIntPair_end(self)

    def rbegin(self):
        return _stepik_alignment.vecIntPair_rbegin(self)

    def rend(self):
        return _stepik_alignment.vecIntPair_rend(self)

    def clear(self):
        return _stepik_alignment.vecIntPair_clear(self)

    def get_allocator(self):
        return _stepik_alignment.vecIntPair_get_allocator(self)

    def pop_back(self):
        return _stepik_alignment.vecIntPair_pop_back(self)

    def erase(self, *args):
        return _stepik_alignment.vecIntPair_erase(self, *args)

    def __init__(self, *args):
        this = _stepik_alignment.new_vecIntPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stepik_alignment.vecIntPair_push_back(self, x)

    def front(self):
        return _stepik_alignment.vecIntPair_front(self)

    def back(self):
        return _stepik_alignment.vecIntPair_back(self)

    def assign(self, n, x):
        return _stepik_alignment.vecIntPair_assign(self, n, x)

    def resize(self, *args):
        return _stepik_alignment.vecIntPair_resize(self, *args)

    def insert(self, *args):
        return _stepik_alignment.vecIntPair_insert(self, *args)

    def reserve(self, n):
        return _stepik_alignment.vecIntPair_reserve(self, n)

    def capacity(self):
        return _stepik_alignment.vecIntPair_capacity(self)
    __swig_destroy__ = _stepik_alignment.delete_vecIntPair
    __del__ = lambda self: None
vecIntPair_swigregister = _stepik_alignment.vecIntPair_swigregister
vecIntPair_swigregister(vecIntPair)

class alignment_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alignment_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alignment_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["score"] = _stepik_alignment.alignment_result_score_set
    __swig_getmethods__["score"] = _stepik_alignment.alignment_result_score_get
    if _newclass:
        score = _swig_property(_stepik_alignment.alignment_result_score_get, _stepik_alignment.alignment_result_score_set)
    __swig_setmethods__["s1"] = _stepik_alignment.alignment_result_s1_set
    __swig_getmethods__["s1"] = _stepik_alignment.alignment_result_s1_get
    if _newclass:
        s1 = _swig_property(_stepik_alignment.alignment_result_s1_get, _stepik_alignment.alignment_result_s1_set)
    __swig_setmethods__["s2"] = _stepik_alignment.alignment_result_s2_set
    __swig_getmethods__["s2"] = _stepik_alignment.alignment_result_s2_get
    if _newclass:
        s2 = _swig_property(_stepik_alignment.alignment_result_s2_get, _stepik_alignment.alignment_result_s2_set)

    def __init__(self):
        this = _stepik_alignment.new_alignment_result()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stepik_alignment.delete_alignment_result
    __del__ = lambda self: None
alignment_result_swigregister = _stepik_alignment.alignment_result_swigregister
alignment_result_swigregister(alignment_result)


def score(s1, s2, gapop, gapex, scoring_matrix, local):
    return _stepik_alignment.score(s1, s2, gapop, gapex, scoring_matrix, local)
score = _stepik_alignment.score

def alignment(s1, s2, gapop, gapex, scoring_matrix, local):
    return _stepik_alignment.alignment(s1, s2, gapop, gapex, scoring_matrix, local)
alignment = _stepik_alignment.alignment

def fitting_score(s1, s2, gap, scoring_matrix):
    return _stepik_alignment.fitting_score(s1, s2, gap, scoring_matrix)
fitting_score = _stepik_alignment.fitting_score

def overlap_score(s1, s2, gap, scoring_matrix):
    return _stepik_alignment.overlap_score(s1, s2, gap, scoring_matrix)
overlap_score = _stepik_alignment.overlap_score

def semiglobal_score(s1, s2, gap, scoring_matrix):
    return _stepik_alignment.semiglobal_score(s1, s2, gap, scoring_matrix)
semiglobal_score = _stepik_alignment.semiglobal_score

def no_deletion_score(s, t, gap, scoring_matrix):
    return _stepik_alignment.no_deletion_score(s, t, gap, scoring_matrix)
no_deletion_score = _stepik_alignment.no_deletion_score

def k_edit_matches(k, text, pattern):
    return _stepik_alignment.k_edit_matches(k, text, pattern)
k_edit_matches = _stepik_alignment.k_edit_matches
# This file is compatible with both classic and new-style classes.


